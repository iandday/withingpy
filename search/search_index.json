{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Withings API Integration","text":"<p>Welcome to the Withings API Integration documentation.</p> <p> </p>"},{"location":"#supported-measurements","title":"Supported Measurements","text":"<ul> <li> Weight</li> <li> Fat Mass</li> <li> Muscle Mass</li> <li> Water Mass</li> <li> Visceral Fat</li> <li> Bone Mass</li> <li> Lean Mass</li> <li> Standing Heart Rate</li> <li> Vascular Age</li> <li> Basal Metabolic Rate</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v109-2025-06-13","title":"v1.0.9 (2025-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>CI: :bug: push logic   (<code>56a8d49</code>)</li> </ul>"},{"location":"CHANGELOG/#v108-2025-06-13","title":"v1.0.8 (2025-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>CI: :bug: remove criteria   (<code>6bf8fe7</code>)</li> </ul>"},{"location":"CHANGELOG/#v107-2025-06-13","title":"v1.0.7 (2025-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>CI: :ambulance: update trusted publisher settings   (<code>5b98a3d</code>)</li> </ul>"},{"location":"CHANGELOG/#v106-2025-06-13","title":"v1.0.6 (2025-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>CI: :rocket: break out actions   (<code>204e242</code>)</li> </ul>"},{"location":"CHANGELOG/#v105-2025-06-08","title":"v1.0.5 (2025-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>CI: Fix environment name   (<code>19693bd</code>)</li> </ul>"},{"location":"CHANGELOG/#v104-2025-06-08","title":"v1.0.4 (2025-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>CI: Update pypi release version   (<code>99a5cb2</code>)</li> </ul>"},{"location":"CHANGELOG/#v103-2025-06-08","title":"v1.0.3 (2025-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>CI: Use pypi action   (<code>4dc9623</code>)</li> </ul>"},{"location":"CHANGELOG/#v102-2025-06-08","title":"v1.0.2 (2025-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>CI: Fix job output variable   (<code>e3ad6bc</code>)</li> </ul>"},{"location":"CHANGELOG/#v101-2025-06-08","title":"v1.0.1 (2025-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>CI: Remove customizations   (<code>02e1c96</code>)</li> </ul>"},{"location":"CHANGELOG/#v100-2025-06-08","title":"v1.0.0 (2025-06-08)","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"CHANGELOG/#v100-alpha1-2025-06-07","title":"v1.0.0-alpha.1 (2025-06-07)","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"CHANGELOG/#v100-alpha1-2025-06-07_1","title":"v1.0.0-alpha.1 (2025-06-07)","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"cli/","title":"CLI Tool","text":""},{"location":"cli/#withings-cli","title":"withings-cli","text":"<p>Withings Public API CLI Tool</p>"},{"location":"cli/#usage","title":"Usage","text":"<p><code>withings-cli [OPTIONS] COMMAND [ARGS]...</code></p>"},{"location":"cli/#arguments","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli/#options","title":"Options","text":"Name Description Required Default <code>--install-completion</code> Install completion for the current shell. No - <code>--show-completion</code> Show completion for the current shell, to copy it or customize the installation. No - <code>--help</code> Show this message and exit. No - <code>configure</code> Populate and save WithingsConfig to a... No - <code>authorize</code> Authorize the app with Withings API No -"},{"location":"cli/#sub-commands","title":"Sub Commands","text":""},{"location":"cli/#withings-cli-configure","title":"<code>withings-cli configure</code>","text":"<p>Populate and save WithingsConfig to a configuration file</p>"},{"location":"cli/#usage_1","title":"Usage","text":"<p><code>withings-cli configure [OPTIONS]</code></p>"},{"location":"cli/#arguments_1","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli/#options_1","title":"Options","text":"Name Description Required Default <code>--base-url TEXT</code> Withings API base URL  [default: https://wbsapi.withings.net] No - <code>--client-id TEXT</code> Withings client ID Yes - <code>--client-secret TEXT</code> Withings client secret Yes - <code>--config-path PATH</code> Path to the config file  [default: withings_config.json] No - <code>--help</code> Show this message and exit. No -"},{"location":"cli/#withings-cli-authorize","title":"<code>withings-cli authorize</code>","text":"<p>Authorize the app with Withings API</p>"},{"location":"cli/#usage_2","title":"Usage","text":"<p><code>withings-cli authorize [OPTIONS]</code></p>"},{"location":"cli/#arguments_2","title":"Arguments","text":"<p>No arguments available</p>"},{"location":"cli/#options_2","title":"Options","text":"Name Description Required Default <code>--config-path PATH</code> Path to the config file  [default: withings_config.json] No - <code>--help</code> Show this message and exit. No -"},{"location":"usage/","title":"Usage","text":"<p>Load configuration data from a JSON file, refresh tokens, save config data, get all available measures in freedom units and save to a JSON file.</p> <pre><code>import json\nfrom pathlib import Path\nfrom pydantic.tools import parse_obj_as\n\nfrom withingpy import WithingsAPIClient\nfrom withingpy.models import WithingsConfig\n\n# load config and create client\nconfig_path = Path(\"withings_config.json\")\nconfig = parse_obj_as(WithingsConfig, json.loads(config_path.read_text()))\nclient = WithingsAPIClient(config)\n\n# refresh token and save config\nclient.refresh_access_token()  \nconfig_path.write_text(config.model_dump_json(indent=2))\n\n# get all available results in pounds instead of kilograms and save to a JSON file\nresults = client.get_normalized_measures(last_update=0, pounds=True)\nif results:\n    Path(\"results.json\").write_text(results.model_dump_json(indent=2))\n</code></pre>"},{"location":"ref/client/","title":"WithingsAPIClient","text":"Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>class WithingsAPIClient:\n    def __init__(self, config: WithingsConfig):\n        \"\"\"Initializes the WithingsApiClient with the provided configuration.\n\n        Args:\n            config (WithingsConfig): The configuration object containing Withings API credentials and settings.\n        \"\"\"\n        self.config = config\n\n    def _headers(self) -&gt; dict[str, str]:\n        \"\"\"Generate HTTP headers for API requests.\n\n        Returns:\n            dict[str, str]: A dictionary containing the HTTP headers, including the\n            Authorization header with a Bearer token if an access token is available,\n            and the Content-Type header set to 'application/x-www-form-urlencoded'.\n        \"\"\"\n        return {\n            \"Authorization\": f\"Bearer {self.config.access_token}\" if self.config.access_token else \"\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        }\n\n    def _generate_signature(self, action: str) -&gt; str:\n        \"\"\"Generates a HMAC-SHA256 signature for the given action using client credentials.\n\n        The signature is created by hashing a comma-delimited string of sorted parameter values,\n        which include the action, client ID, current timestamp, and a nonce. The client secret is\n        used as the HMAC key.\n\n        Args:\n            action (str): The action for which the signature is being generated.\n\n        Returns:\n            str: The generated hexadecimal HMAC-SHA256 signature.\n        \"\"\"\n        params = {\n            \"action\": action,\n            \"client_id\": self.config.client_id,\n            \"timestamp\": int(time.time()),\n            \"nonce\": self.get_nonce(),\n        }\n        sorted_values = \",\".join(str(value) for value in params.values())\n        hmac_obj = hmac.new(self.config.client_secret.encode(), sorted_values.encode(), hashlib.sha256)\n        return hmac_obj.hexdigest()\n\n    def get_nonce(self) -&gt; str:\n        \"\"\"Requests a nonce value from the Withings API for use in request signing.\n\n        Sends a POST request to the /v2/signature endpoint with the required authentication\n        parameters, including client ID, timestamp, and a generated signature. Parses the\n        response to extract and return the nonce value.\n\n        Returns:\n            str: The nonce value retrieved from the API response.\n\n        Raises:\n            ValueError: If the nonce is not found in the API response.\n            requests.HTTPError: If the HTTP request fails.\n        \"\"\"\n        url = f\"{self.config.base_url}/v2/signature\"\n        data = {\n            \"action\": \"getnonce\",\n            \"client_id\": self.config.client_id,\n            \"timestamp\": int(time.time()),\n            \"signature\": self._generate_signature(\"getnonce\"),\n        }\n        resp = requests.post(url, data=data)\n        resp.raise_for_status()\n        if value := resp.json().get(\"body\", {}).get(\"nonce\"):\n            return value\n        else:\n            raise ValueError(\"Nonce not found in response\")\n\n    def get_access_token(self, code: str, redirect_uri: str) -&gt; dict[str, Any]:\n        \"\"\"Exchanges an authorization code for an access token from the Withings API.\n\n        Args:\n            code (str): The authorization code received from the OAuth2 authorization step.\n            redirect_uri (str): The redirect URI used in the OAuth2 flow.\n\n        Returns:\n            dict[str, Any]: The JSON response from the Withings API containing the access token and related information.\n\n        Raises:\n            ValueError: If the API response status code is not 200.\n            requests.HTTPError: If the HTTP request fails.\n        \"\"\"\n        url = f\"{self.config.base_url}/v2/oauth2\"\n        data = {\n            \"action\": \"requesttoken\",\n            \"client_id\": self.config.client_id,\n            \"client_secret\": self.config.client_secret,\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": redirect_uri,\n        }\n        resp = requests.post(url, data=data)\n        resp.raise_for_status()\n        if resp.status_code != 200:\n            raise ValueError(f\"Failed to get access token: {resp.text}\")\n        return resp.json()\n\n    def refresh_access_token(self) -&gt; None:\n        \"\"\"Refreshes the OAuth2 access token using the stored refresh token.\n\n        Sends a POST request to the Withings OAuth2 endpoint to obtain a new access token and refresh token.\n        Updates the configuration with the new tokens upon success.\n\n        Raises:\n            ValueError: If the HTTP response status code is not 200.\n            AuthenticationError: If the API response indicates authentication failure.\n        \"\"\"\n        url = f\"{self.config.base_url}/v2/oauth2\"\n        data = {\n            \"action\": \"requesttoken\",\n            \"client_id\": self.config.client_id,\n            \"client_secret\": self.config.client_secret,\n            \"grant_type\": \"refresh_token\",\n            \"refresh_token\": self.config.refresh_token,\n        }\n        resp = requests.post(url, data=data)\n        resp.raise_for_status()\n        if resp.status_code != 200:\n            raise ValueError(f\"Failed to refresh access token: {resp.text}\")\n        else:\n            if resp.json().get(\"status\") != 0:\n                raise AuthenticationError(f\"Authentication failed: {resp.json().get('error', 'Unknown error')}\")\n            else:\n                self.config.access_token = resp.json().get(\"body\", {}).get(\"access_token\")\n                self.config.refresh_token = resp.json().get(\"body\", {}).get(\"refresh_token\")\n\n    def get_raw_measures(self, last_update: int = 0) -&gt; dict[str, Any]:\n        \"\"\"Fetches raw measurement data from the Withings API.\n\n        Attempts to retrieve measurement data using a POST request to the Withings API endpoint.\n        Implements up to 3 retries with exponential backoff in case of authorization errors (status 401).\n        If an authorization error occurs, attempts to refresh the access token and retry the request.\n        Raises a RuntimeError if the request fails after the maximum number of attempts or if an unexpected error occurs.\n\n        Args:\n            last_update (int, optional): Unix timestamp to fetch measurements updated since this time. Defaults to 0.\n\n        Returns:\n            dict[str, Any]: The JSON response from the Withings API containing measurement data.\n\n        Raises:\n            RuntimeError: If the request fails after 3 attempts or if an unexpected error occurs.\n        \"\"\"\n        url = \"https://scalews.withings.com/measure\"\n        data = {\"action\": \"getmeas\", \"lastupdate\": last_update}\n\n        attempts = 0\n        max_attempts = 3\n        backoff = 1\n\n        while attempts &lt; max_attempts:\n            resp = requests.post(url, data=data, headers=self._headers())\n            resp.raise_for_status()\n            if resp.status_code == 200:\n                real_status = resp.json().get(\"status\")\n                if real_status == 401:\n                    logger.error(\"Unauthorized request, trying to refresh access token.\")\n                    # Try to refresh token and retry\n                    self.refresh_access_token()\n                    attempts += 1\n                    time.sleep(backoff)\n                    backoff *= 2\n                    continue\n                elif real_status == 0:\n                    return resp.json()\n                else:\n                    logger.error(f\"Error fetching measures: {resp.json().get('error', 'Unknown error')}\")\n                    raise RuntimeError(f\"Error fetching measures: {resp.json().get('error', 'Unknown error')}\")\n            else:\n                logger.error(f\"Unexpected status code: {resp.status_code}, response: {resp.text}\")\n                raise RuntimeError(f\"Unexpected status code: {resp.status_code}\")\n        raise RuntimeError(\"Failed to fetch measures after 3 attempts (with exponential backoff).\")\n\n    def _compute_value(self, value: float, unit: int, pounds: bool) -&gt; float:\n        \"\"\"Computes the measurement value based on the provided value, unit, and desired output unit.\n\n        Args:\n            value (float): The raw measurement value.\n            unit (int): The power of ten exponent to scale the value.\n            pounds (bool): If True, converts the result to pounds; otherwise, returns the value in kilograms.\n\n        Returns:\n            float: The computed measurement value, scaled and optionally converted to pounds.\n        \"\"\"\n        if pounds:\n            return value * pow(10, unit) * 2.20462\n        else:\n            return value * pow(10, unit)\n\n    def get_normalized_measures(self, last_update: int = 0, pounds: bool = False) -&gt; WithingsMeasurements:\n        \"\"\"Retrieve and normalize body composition measures from the Withings API.\n\n        This method fetches raw measurement data, processes it, and returns a structured\n        `WithingsMeasurements` object containing lists of various body composition metrics,\n        such as weight, fat mass, muscle mass, water mass, visceral fat, bone mass, and lean mass.\n        Each measurement is normalized to either kilograms or pounds, depending on the `pounds` flag.\n\n        Args:\n            last_update (int, optional): Unix timestamp to filter measurements updated after this time.\n                Defaults to 0, which retrieves all available measurements.\n            pounds (bool, optional): If True, converts weight-related measurements to pounds (lb).\n                If False, measurements are in kilograms (kg). Defaults to False.\n\n        Returns:\n            WithingsMeasurements: An object containing lists of normalized measurement data for each\n                supported body composition metric.\n\n        Notes:\n            - The method logs a warning for unsupported measurement types.\n            - Timezone information is extracted from the API response and used to localize timestamps.\n            - Each measurement includes attribution, timestamps (taken, created, modified), device ID,\n              value, and unit of measurement (where applicable).\n        \"\"\"\n        raw_measures = self.get_raw_measures(last_update=last_update)\n        tz = raw_measures.get(\"body\", {}).get(\"timezone\")\n\n        measurements = WithingsMeasurements(\n            weight=[],\n            fat_mass=[],\n            muscle_mass=[],\n            water_mass=[],\n            visceral_fat=[],\n            bone_mass=[],\n            lean_mass=[],\n        )\n        for result in raw_measures.get(\"body\", {}).get(\"measuregrps\", []):\n            dt_date = datetime.fromtimestamp(result[\"date\"], tz=ZoneInfo(tz))\n            dt_created = datetime.fromtimestamp(result[\"created\"], tz=ZoneInfo(tz))\n            dt_modified = datetime.fromtimestamp(result[\"modified\"], tz=ZoneInfo(tz))\n            for measure in result.get(\"measures\", []):\n                if measure[\"type\"] == 1:\n                    measurements.weight.append(\n                        WithingsWeight(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                            uom=\"lb\" if pounds else \"kg\",\n                        )\n                    )\n                elif measure[\"type\"] == 8:\n                    # Fat Mass Weight\n                    measurements.fat_mass.append(\n                        WithingsFatMass(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                            uom=\"lb\" if pounds else \"kg\",\n                        )\n                    )\n                elif measure[\"type\"] == 76:\n                    # Muscle Mass\n                    measurements.muscle_mass.append(\n                        WithingsMuscleMass(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                            uom=\"lb\" if pounds else \"kg\",\n                        )\n                    )\n                elif measure[\"type\"] == 77:\n                    # Hydration (Water Mass)\n                    measurements.water_mass.append(\n                        WithingsWaterMass(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                            uom=\"lb\" if pounds else \"kg\",\n                        )\n                    )\n                elif measure[\"type\"] == 170:\n                    # Visceral Fat\n                    measurements.visceral_fat.append(\n                        WithingsVisceralFat(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=measure[\"value\"] * pow(10, measure.get(\"unit\")),\n                        )\n                    )\n                elif measure[\"type\"] == 88:\n                    # Bone Mass\n                    measurements.bone_mass.append(\n                        WithingsBoneMass(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                            uom=\"lb\" if pounds else \"kg\",\n                        )\n                    )\n                elif measure[\"type\"] == 5:\n                    # Fat Free Mass\n                    measurements.lean_mass.append(\n                        WithingsLeanMass(\n                            attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                            taken=dt_date,\n                            created=dt_created,\n                            modified=dt_modified,\n                            deviceid=result.get(\"deviceid\"),\n                            value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                            uom=\"lb\" if pounds else \"kg\",\n                        )\n                    )\n                else:\n                    logger.warning(f\"Unsupported measure type {measure['type']} with value {measure['value']} and unit {measure.get('unit')}\")\n\n        return measurements\n</code></pre>"},{"location":"ref/client/#withingpy.WithingsAPIClient.__init__","title":"<code>__init__(config)</code>","text":"<p>Initializes the WithingsApiClient with the provided configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>WithingsConfig</code> <p>The configuration object containing Withings API credentials and settings.</p> required Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>def __init__(self, config: WithingsConfig):\n    \"\"\"Initializes the WithingsApiClient with the provided configuration.\n\n    Args:\n        config (WithingsConfig): The configuration object containing Withings API credentials and settings.\n    \"\"\"\n    self.config = config\n</code></pre>"},{"location":"ref/client/#withingpy.WithingsAPIClient.get_access_token","title":"<code>get_access_token(code, redirect_uri)</code>","text":"<p>Exchanges an authorization code for an access token from the Withings API.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code received from the OAuth2 authorization step.</p> required <code>redirect_uri</code> <code>str</code> <p>The redirect URI used in the OAuth2 flow.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the Withings API containing the access token and related information.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the API response status code is not 200.</p> <code>HTTPError</code> <p>If the HTTP request fails.</p> Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>def get_access_token(self, code: str, redirect_uri: str) -&gt; dict[str, Any]:\n    \"\"\"Exchanges an authorization code for an access token from the Withings API.\n\n    Args:\n        code (str): The authorization code received from the OAuth2 authorization step.\n        redirect_uri (str): The redirect URI used in the OAuth2 flow.\n\n    Returns:\n        dict[str, Any]: The JSON response from the Withings API containing the access token and related information.\n\n    Raises:\n        ValueError: If the API response status code is not 200.\n        requests.HTTPError: If the HTTP request fails.\n    \"\"\"\n    url = f\"{self.config.base_url}/v2/oauth2\"\n    data = {\n        \"action\": \"requesttoken\",\n        \"client_id\": self.config.client_id,\n        \"client_secret\": self.config.client_secret,\n        \"grant_type\": \"authorization_code\",\n        \"code\": code,\n        \"redirect_uri\": redirect_uri,\n    }\n    resp = requests.post(url, data=data)\n    resp.raise_for_status()\n    if resp.status_code != 200:\n        raise ValueError(f\"Failed to get access token: {resp.text}\")\n    return resp.json()\n</code></pre>"},{"location":"ref/client/#withingpy.WithingsAPIClient.get_nonce","title":"<code>get_nonce()</code>","text":"<p>Requests a nonce value from the Withings API for use in request signing.</p> <p>Sends a POST request to the /v2/signature endpoint with the required authentication parameters, including client ID, timestamp, and a generated signature. Parses the response to extract and return the nonce value.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The nonce value retrieved from the API response.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the nonce is not found in the API response.</p> <code>HTTPError</code> <p>If the HTTP request fails.</p> Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>def get_nonce(self) -&gt; str:\n    \"\"\"Requests a nonce value from the Withings API for use in request signing.\n\n    Sends a POST request to the /v2/signature endpoint with the required authentication\n    parameters, including client ID, timestamp, and a generated signature. Parses the\n    response to extract and return the nonce value.\n\n    Returns:\n        str: The nonce value retrieved from the API response.\n\n    Raises:\n        ValueError: If the nonce is not found in the API response.\n        requests.HTTPError: If the HTTP request fails.\n    \"\"\"\n    url = f\"{self.config.base_url}/v2/signature\"\n    data = {\n        \"action\": \"getnonce\",\n        \"client_id\": self.config.client_id,\n        \"timestamp\": int(time.time()),\n        \"signature\": self._generate_signature(\"getnonce\"),\n    }\n    resp = requests.post(url, data=data)\n    resp.raise_for_status()\n    if value := resp.json().get(\"body\", {}).get(\"nonce\"):\n        return value\n    else:\n        raise ValueError(\"Nonce not found in response\")\n</code></pre>"},{"location":"ref/client/#withingpy.WithingsAPIClient.get_normalized_measures","title":"<code>get_normalized_measures(last_update=0, pounds=False)</code>","text":"<p>Retrieve and normalize body composition measures from the Withings API.</p> <p>This method fetches raw measurement data, processes it, and returns a structured <code>WithingsMeasurements</code> object containing lists of various body composition metrics, such as weight, fat mass, muscle mass, water mass, visceral fat, bone mass, and lean mass. Each measurement is normalized to either kilograms or pounds, depending on the <code>pounds</code> flag.</p> <p>Parameters:</p> Name Type Description Default <code>last_update</code> <code>int</code> <p>Unix timestamp to filter measurements updated after this time. Defaults to 0, which retrieves all available measurements.</p> <code>0</code> <code>pounds</code> <code>bool</code> <p>If True, converts weight-related measurements to pounds (lb). If False, measurements are in kilograms (kg). Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>WithingsMeasurements</code> <code>WithingsMeasurements</code> <p>An object containing lists of normalized measurement data for each supported body composition metric.</p> Notes <ul> <li>The method logs a warning for unsupported measurement types.</li> <li>Timezone information is extracted from the API response and used to localize timestamps.</li> <li>Each measurement includes attribution, timestamps (taken, created, modified), device ID,   value, and unit of measurement (where applicable).</li> </ul> Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>def get_normalized_measures(self, last_update: int = 0, pounds: bool = False) -&gt; WithingsMeasurements:\n    \"\"\"Retrieve and normalize body composition measures from the Withings API.\n\n    This method fetches raw measurement data, processes it, and returns a structured\n    `WithingsMeasurements` object containing lists of various body composition metrics,\n    such as weight, fat mass, muscle mass, water mass, visceral fat, bone mass, and lean mass.\n    Each measurement is normalized to either kilograms or pounds, depending on the `pounds` flag.\n\n    Args:\n        last_update (int, optional): Unix timestamp to filter measurements updated after this time.\n            Defaults to 0, which retrieves all available measurements.\n        pounds (bool, optional): If True, converts weight-related measurements to pounds (lb).\n            If False, measurements are in kilograms (kg). Defaults to False.\n\n    Returns:\n        WithingsMeasurements: An object containing lists of normalized measurement data for each\n            supported body composition metric.\n\n    Notes:\n        - The method logs a warning for unsupported measurement types.\n        - Timezone information is extracted from the API response and used to localize timestamps.\n        - Each measurement includes attribution, timestamps (taken, created, modified), device ID,\n          value, and unit of measurement (where applicable).\n    \"\"\"\n    raw_measures = self.get_raw_measures(last_update=last_update)\n    tz = raw_measures.get(\"body\", {}).get(\"timezone\")\n\n    measurements = WithingsMeasurements(\n        weight=[],\n        fat_mass=[],\n        muscle_mass=[],\n        water_mass=[],\n        visceral_fat=[],\n        bone_mass=[],\n        lean_mass=[],\n    )\n    for result in raw_measures.get(\"body\", {}).get(\"measuregrps\", []):\n        dt_date = datetime.fromtimestamp(result[\"date\"], tz=ZoneInfo(tz))\n        dt_created = datetime.fromtimestamp(result[\"created\"], tz=ZoneInfo(tz))\n        dt_modified = datetime.fromtimestamp(result[\"modified\"], tz=ZoneInfo(tz))\n        for measure in result.get(\"measures\", []):\n            if measure[\"type\"] == 1:\n                measurements.weight.append(\n                    WithingsWeight(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                        uom=\"lb\" if pounds else \"kg\",\n                    )\n                )\n            elif measure[\"type\"] == 8:\n                # Fat Mass Weight\n                measurements.fat_mass.append(\n                    WithingsFatMass(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                        uom=\"lb\" if pounds else \"kg\",\n                    )\n                )\n            elif measure[\"type\"] == 76:\n                # Muscle Mass\n                measurements.muscle_mass.append(\n                    WithingsMuscleMass(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                        uom=\"lb\" if pounds else \"kg\",\n                    )\n                )\n            elif measure[\"type\"] == 77:\n                # Hydration (Water Mass)\n                measurements.water_mass.append(\n                    WithingsWaterMass(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                        uom=\"lb\" if pounds else \"kg\",\n                    )\n                )\n            elif measure[\"type\"] == 170:\n                # Visceral Fat\n                measurements.visceral_fat.append(\n                    WithingsVisceralFat(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=measure[\"value\"] * pow(10, measure.get(\"unit\")),\n                    )\n                )\n            elif measure[\"type\"] == 88:\n                # Bone Mass\n                measurements.bone_mass.append(\n                    WithingsBoneMass(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                        uom=\"lb\" if pounds else \"kg\",\n                    )\n                )\n            elif measure[\"type\"] == 5:\n                # Fat Free Mass\n                measurements.lean_mass.append(\n                    WithingsLeanMass(\n                        attribution=attribution.get(result.get(\"attrib\"), \"Unknown\"),\n                        taken=dt_date,\n                        created=dt_created,\n                        modified=dt_modified,\n                        deviceid=result.get(\"deviceid\"),\n                        value=self._compute_value(value=measure[\"value\"], unit=measure.get(\"unit\"), pounds=pounds),\n                        uom=\"lb\" if pounds else \"kg\",\n                    )\n                )\n            else:\n                logger.warning(f\"Unsupported measure type {measure['type']} with value {measure['value']} and unit {measure.get('unit')}\")\n\n    return measurements\n</code></pre>"},{"location":"ref/client/#withingpy.WithingsAPIClient.get_raw_measures","title":"<code>get_raw_measures(last_update=0)</code>","text":"<p>Fetches raw measurement data from the Withings API.</p> <p>Attempts to retrieve measurement data using a POST request to the Withings API endpoint. Implements up to 3 retries with exponential backoff in case of authorization errors (status 401). If an authorization error occurs, attempts to refresh the access token and retry the request. Raises a RuntimeError if the request fails after the maximum number of attempts or if an unexpected error occurs.</p> <p>Parameters:</p> Name Type Description Default <code>last_update</code> <code>int</code> <p>Unix timestamp to fetch measurements updated since this time. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The JSON response from the Withings API containing measurement data.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the request fails after 3 attempts or if an unexpected error occurs.</p> Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>def get_raw_measures(self, last_update: int = 0) -&gt; dict[str, Any]:\n    \"\"\"Fetches raw measurement data from the Withings API.\n\n    Attempts to retrieve measurement data using a POST request to the Withings API endpoint.\n    Implements up to 3 retries with exponential backoff in case of authorization errors (status 401).\n    If an authorization error occurs, attempts to refresh the access token and retry the request.\n    Raises a RuntimeError if the request fails after the maximum number of attempts or if an unexpected error occurs.\n\n    Args:\n        last_update (int, optional): Unix timestamp to fetch measurements updated since this time. Defaults to 0.\n\n    Returns:\n        dict[str, Any]: The JSON response from the Withings API containing measurement data.\n\n    Raises:\n        RuntimeError: If the request fails after 3 attempts or if an unexpected error occurs.\n    \"\"\"\n    url = \"https://scalews.withings.com/measure\"\n    data = {\"action\": \"getmeas\", \"lastupdate\": last_update}\n\n    attempts = 0\n    max_attempts = 3\n    backoff = 1\n\n    while attempts &lt; max_attempts:\n        resp = requests.post(url, data=data, headers=self._headers())\n        resp.raise_for_status()\n        if resp.status_code == 200:\n            real_status = resp.json().get(\"status\")\n            if real_status == 401:\n                logger.error(\"Unauthorized request, trying to refresh access token.\")\n                # Try to refresh token and retry\n                self.refresh_access_token()\n                attempts += 1\n                time.sleep(backoff)\n                backoff *= 2\n                continue\n            elif real_status == 0:\n                return resp.json()\n            else:\n                logger.error(f\"Error fetching measures: {resp.json().get('error', 'Unknown error')}\")\n                raise RuntimeError(f\"Error fetching measures: {resp.json().get('error', 'Unknown error')}\")\n        else:\n            logger.error(f\"Unexpected status code: {resp.status_code}, response: {resp.text}\")\n            raise RuntimeError(f\"Unexpected status code: {resp.status_code}\")\n    raise RuntimeError(\"Failed to fetch measures after 3 attempts (with exponential backoff).\")\n</code></pre>"},{"location":"ref/client/#withingpy.WithingsAPIClient.refresh_access_token","title":"<code>refresh_access_token()</code>","text":"<p>Refreshes the OAuth2 access token using the stored refresh token.</p> <p>Sends a POST request to the Withings OAuth2 endpoint to obtain a new access token and refresh token. Updates the configuration with the new tokens upon success.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the HTTP response status code is not 200.</p> <code>AuthenticationError</code> <p>If the API response indicates authentication failure.</p> Source code in <code>src/withingpy/withings_api_client.py</code> <pre><code>def refresh_access_token(self) -&gt; None:\n    \"\"\"Refreshes the OAuth2 access token using the stored refresh token.\n\n    Sends a POST request to the Withings OAuth2 endpoint to obtain a new access token and refresh token.\n    Updates the configuration with the new tokens upon success.\n\n    Raises:\n        ValueError: If the HTTP response status code is not 200.\n        AuthenticationError: If the API response indicates authentication failure.\n    \"\"\"\n    url = f\"{self.config.base_url}/v2/oauth2\"\n    data = {\n        \"action\": \"requesttoken\",\n        \"client_id\": self.config.client_id,\n        \"client_secret\": self.config.client_secret,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": self.config.refresh_token,\n    }\n    resp = requests.post(url, data=data)\n    resp.raise_for_status()\n    if resp.status_code != 200:\n        raise ValueError(f\"Failed to refresh access token: {resp.text}\")\n    else:\n        if resp.json().get(\"status\") != 0:\n            raise AuthenticationError(f\"Authentication failed: {resp.json().get('error', 'Unknown error')}\")\n        else:\n            self.config.access_token = resp.json().get(\"body\", {}).get(\"access_token\")\n            self.config.refresh_token = resp.json().get(\"body\", {}).get(\"refresh_token\")\n</code></pre>"},{"location":"ref/models/","title":"Models","text":"<p>               Bases: <code>BaseModel</code></p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> required <code>client_id</code> <code>str</code> required <code>client_secret</code> <code>str</code> required <code>access_token</code> <code>str | None</code> <code>None</code> <code>refresh_token</code> <code>str | None</code> <code>None</code> <p>Fields:</p> <ul> <li> <code>base_url</code>                 (<code>str</code>)             </li> <li> <code>client_id</code>                 (<code>str</code>)             </li> <li> <code>client_secret</code>                 (<code>str</code>)             </li> <li> <code>access_token</code>                 (<code>str | None</code>)             </li> <li> <code>refresh_token</code>                 (<code>str | None</code>)             </li> </ul> <p>               Bases: <code>BaseModel</code></p> <p>Parameters:</p> Name Type Description Default <code>attribution</code> <code>str | None</code> <code>None</code> <code>taken</code> <code>datetime</code> required <code>created</code> <code>datetime</code> required <code>modified</code> <code>datetime</code> required <code>deviceid</code> <code>str | None</code> <code>None</code> <code>value</code> <code>float | None</code> <code>None</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str</code> <code>'kg'</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str</code> <code>'kg'</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str</code> <code>'kg'</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str</code> <code>'kg'</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str</code> <code>'kg'</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str</code> <code>'kg'</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str</code>)             </li> </ul> <p>               Bases: <code>BaseMeasurement</code></p> <p>Parameters:</p> Name Type Description Default <code>uom</code> <code>str | None</code> <code>None</code> <p>Fields:</p> <ul> <li> <code>attribution</code>                 (<code>str | None</code>)             </li> <li> <code>taken</code>                 (<code>datetime</code>)             </li> <li> <code>created</code>                 (<code>datetime</code>)             </li> <li> <code>modified</code>                 (<code>datetime</code>)             </li> <li> <code>deviceid</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>uom</code>                 (<code>str | None</code>)             </li> </ul> <p>               Bases: <code>BaseModel</code></p> <p>Container for various Withings measurements.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>list[WithingsWeight]</code> <code>[]</code> <code>fat_mass</code> <code>list[WithingsFatMass]</code> <code>[]</code> <code>muscle_mass</code> <code>list[WithingsMuscleMass]</code> <code>[]</code> <code>water_mass</code> <code>list[WithingsWaterMass]</code> <code>[]</code> <code>visceral_fat</code> <code>list[WithingsVisceralFat]</code> <code>[]</code> <code>bone_mass</code> <code>list[WithingsBoneMass]</code> <code>[]</code> <code>lean_mass</code> <code>list[WithingsLeanMass]</code> <code>[]</code> <p>Fields:</p> <ul> <li> <code>weight</code>                 (<code>list[WithingsWeight]</code>)             </li> <li> <code>fat_mass</code>                 (<code>list[WithingsFatMass]</code>)             </li> <li> <code>muscle_mass</code>                 (<code>list[WithingsMuscleMass]</code>)             </li> <li> <code>water_mass</code>                 (<code>list[WithingsWaterMass]</code>)             </li> <li> <code>visceral_fat</code>                 (<code>list[WithingsVisceralFat]</code>)             </li> <li> <code>bone_mass</code>                 (<code>list[WithingsBoneMass]</code>)             </li> <li> <code>lean_mass</code>                 (<code>list[WithingsLeanMass]</code>)             </li> </ul>"},{"location":"setup/app_creation/","title":"Application Creation","text":"<ol> <li>Create an application at the Withings Developer Dashboard selecting the <code>Public Cloud</code> option.  </li> <li>Select <code>Create a new organization</code> once logged in </li> <li>Enter a value for the <code>Organization Name</code> and <code>Contact Email</code> fields</li> <li>Select <code>Create application</code> once the organization is created</li> <li>Select <code>Public API integration</code> from the available services, accept the terms of use, and select <code>Next</code> </li> <li>Select <code>Development</code> for the <code>Target Environment</code> field.  Enter any value for the <code>Application Name</code> and <code>Application Description</code> fields.  Enter <code>http://localhost</code> for the <code>Registered URLs</code> field, and select next.</li> <li>Save the <code>ClientID</code> and <code>Secret</code> values, then select <code>Confirm</code></li> </ol>"},{"location":"setup/authorize/","title":"Authorize","text":"<ol> <li> <p>Create a configuration file using the command line tool <code>withings-cli configure</code>.  You will be prompted for your client ID and secret, along with the option to override the base URL and path to save the created configuration file. <pre><code>(withings) ianday@Ians-MBP withings % withings-cli configure --help\n\n Usage: withings-cli configure [OPTIONS]                                                                                                                                                           \n\n Populate and save WithingsConfig to a configuration file                                                                                                                                          \n\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502    --base-url             TEXT  Withings API base URL [default: https://wbsapi.withings.net]                                                                                                    \u2502\n\u2502 *  --client-id            TEXT  Withings client ID [default: None] [required]                                                                                                                   \u2502\n\u2502 *  --client-secret        TEXT  Withings client secret [default: None] [required]                                                                                                               \u2502\n\u2502    --config-path          PATH  Path to the config file [default: withings_config.json]                                                                                                         \u2502\n\u2502    --help                       Show this message and exit.                                                                                                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p> </li> <li> <p>Authorize the app to access your data using the command line tool <code>withings-cli authorize</code>.  The command will launch the default web browser to the required URL. <pre><code>(withings) ianday@Ians-MBP withings % withings-cli authorize --help\n\n Usage: withings-cli authorize [OPTIONS]                                                                                                                                                           \n\n Authorize the app with Withings API                                                                                                                                                               \n\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --config-path        PATH  Path to the config file [default: withings_config.json]                                                                                                              \u2502\n\u2502 --help                     Show this message and exit.                                                                                                                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p> </li> </ol> <p> 3. You will be presented with a 404 error after clicking <code>Allow this app</code>, copy the full URL and paste it in the prompt as shown below.  You can now access your data via API</p> <p></p> <p></p>"}]}